# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
orbs:
  aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
jobs:
  # Exercise: Create Infrastructure
  # create_infrastructure: 
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file template.yml \
  #             --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #             --region us-east-1
  #     - destroy_environment
  #Exercise: Configure Infrastructure
  # configure_infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #           fingerprints: [36:96:87:28:e3:ae:14:50:0e:f9:94:de:c0:4e:46:a7]
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #           ansible-playbook -i inventory.txt main-remote.yml
  #Exercise: Smoke Testing
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: 
  #         name: Test failed job
  #         command: | 
  #           URL="https://blog.udacity.com/"
  #           # Test if website exists
  #           if curl -s --head ${URL} 
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #Exercise:  
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:5} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:5}"
      # Uncomment the step below if you wish to upload all contents of the current directory to the S3 bucket
      # - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:5} --delete
  promote_to_production:
    docker:
     - image: amazon/aws-cli
    steps:
     - checkout
     - run:
         name: Execute cloudfront.yml
         command: |
           aws cloudformation deploy \
           --template-file cloudfront.yml \
           --stack-name production-distro \
           --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:5}"
  get_last_deployment_id:
    docker:
     - image: amazon/aws-cli
    steps:
     - checkout
     - run: yum install -y tar gzip
     - run:
         name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
         command: |
           aws cloudformation \
           list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
           --no-paginate --output text > ~/textfile.txt
     - persist_to_workspace:
         root: ~/
         paths: 
           - textfile.txt 
  clean_up_old_front_end:
    docker:
     - image: amazon/aws-cli
    steps:
     - checkout
     - run: yum install -y tar gzip
     - attach_workspace:
         at: ~/
     - run:
         name: Destroy the previous S3 bucket and CloudFormation stack. 
         # Use $OldBucketID environment variable or mybucket644752792305 below.
         # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
         command: |
           export OldBucketID=$(cat ~/textfile.txt)
           aws s3 rm "s3://${OldBucketID}" --recursive
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  crete_infraastructure_workflow:
    jobs:
      # - create_infrastructure
      # - configure_infrastructure
      # - smoke_test
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production